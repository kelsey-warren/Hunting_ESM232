---
title: "ESM 232 Hunting Assignment"
author: "Kelsey Warren & Maxwell Pepperdine"
format: 
  html:
    toc: true
    embed-resources: true
date: last-modified
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  message: false
  warning: false
---

## Load packages

```{r clear env}
rm(list=ls())
```

```{r libraries, echo=TRUE, output=FALSE}
library(here)
library(lhs)
library(epiR)
library(tidyverse)
library(deSolve)
library(ggplot2)
```

## Overview

This assignment is designed to explore the effects of hunting on predator-prey dynamics using a modified Lotka-Volterra model. We will build a model that incorporates hunting, define a stability metric, and explore different hunting levels and minimum prey populations to find sustainable hunting targets. It's split into two parts:

-   **Part 1:** Building the hunting model
-   **Part 2:** Exploring different hunting levels and minimum prey populations to find sustainable hunting targets.

## Part 1

We first need to build a model that includes hunting. This will be similar to the `lotvmodK.R` model, but with an added hunting component. This model needs to ensure that we don't hunt more prey than exist. To do this, we can add a minimum prey population input that must be met before hunting is allowed (only turn on hunting above this value).

#### Build the hunting model

```{r load hunting model}
# load the hunting model
source(here::here("R/hunt_lotvmodK.R"))

# call the model
hunt_lotvmodK
```

## Part 2

In this section, our goal is to explore how different hunting levels and different minimum prey populations (before hunting is allowed) are likely to effect the stability of the populations of both predator and prey. To do this, we will define a stability metric which we can use to estimate sustainable hunting levels, play around with different parameter sets, and then use this exploration to recommend a hunting target that will be sustainable (e.g leave you with a stable prey and predator population).

#### Defining stability

For the purpose of this assignment, we're defining stability as the ability of the prey and predator populations to remain above a threshold of **50 individuals** for **10 years** into the future. We're assuming the reproduction cycle of prey populations are much shorter than 10 years, and we want to maintain a population size that's at least 50 individuals over this time.

#### Exploring hunting levels & minimum prey populations

To "explore" hunting, we're simply trying different values for the hunting rate in the `hunt_lotvmodK` model until we find a value that allows the prey population to remain above 50 individuals for 10 years (3650 days) into the future.

For all of the following model runs, we keep all parameters constant except for the hunting rate and run the model for 10 years to see how the populations of both predator and prey change over time. After each run we check the prey population at the end of the 10 years to see if it is above 50 individuals. If it is, we consider that a "sustainable" hunting target.

### Simple exploration

###### Take 1

-   `hunt_rate` = 0.5

```{r take 1, echo=TRUE, output=FALSE}
# set parameter list (best guess assumptions from assignment description)
pars <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, 
           K = 2000, hunt_rate = 0.5, min_prey_thresh = 50)


# evaluate 10 years into the future 
days <- seq(from = 1, to = 3650)

# see what happens when we start with 1000 prey and 100 predators
currpop <- c(prey = 500, pred = 50)
# run our differential equation solver
res <- ode(func = hunt_lotvmodK, y = currpop, times = days, parms = pars, method = "ode45")
# extract the results
res_take1 <- as.data.frame(res) %>% 
  gather(key = "animal", value = "pop", -time)
```

```{r take 1 plot}
# graph both populations over time
p1 <- ggplot(res_take1, aes(time, pop, col = animal)) +
  geom_line() + 
  theme_classic()
p1

# check our metric value (prey pop above at least 50 individuals after 10 years)
# this is how we define stability
if (!3650 %in% res_take1$time) {
  print("Hunting target is not sustainable: model did not reach 10 years.")
} else if (res_take1$pop[res_take1$time == 3650 & res_take1$animal == "prey"] >= 50) {
  print("The hunting target is sustainable.")
} else {
  print("Hunting target is not sustainable: prey population below threshold.")
}
```

###### Take 2

-   `hunt_rate` = 0.99

```{r take 2, echo=TRUE, output=FALSE}
# set parameter list 
pars <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, 
           K = 2000, hunt_rate = 0.99, min_prey_thresh = 200)


# run our differential equation solver
res <- ode(func = hunt_lotvmodK, y = currpop, times = days, parms = pars, method = "ode45")
# extract the results
res_take2 <- as.data.frame(res) %>% 
  gather(key = "animal", value = "pop", -time)
```

```{r take 2 plot}
# graph both populations over time
p2 <- ggplot(res_take2, aes(time, pop, col = animal)) +
  geom_line() + 
  theme_classic()
p2


# check our metric value (prey pop above at least 50 individuals after 10 years)
# this is how we define stability
if (!3650 %in% res_take2$time) {
  print("Hunting target is not sustainable: model did not reach 10 years.")
} else if (res_take2$pop[res_take2$time == 3650 & res_take2$animal == "prey"] >= 50) {
  print("The hunting target is sustainable: prey population above threshold 10 years into the future.")
} else {
  print("Hunting target is not sustainable: prey population below threshold.")
}
```

###### Take 3

-   `hunt_rate` = 0.3

```{r take 3, echo=TRUE, output=FALSE}
# set parameter list 
pars <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, 
           K = 2000, hunt_rate = 0.3, min_prey_thresh = 200)


# run our differential equation solver
res <- ode(func = hunt_lotvmodK, y = currpop, times = days, parms = pars, method = "ode45")
# extract the results
res_take3 <- as.data.frame(res) %>% 
  gather(key = "animal", value = "pop", -time)
```

```{r take 3 plot}
# graph both populations over time
p3 <- ggplot(res_take3, aes(time, pop, col = animal)) +
  geom_line() + 
  theme_classic()
p3


# check our metric value (prey pop above at least 50 individuals after 10 years)
# this is how we define stability
if (!3650 %in% res_take3$time) {
  print("Hunting target is not sustainable: model did not reach 10 years.")
} else if (res_take3$pop[res_take3$time == 3650 & res_take3$animal == "prey"] >= 50) {
  print("The hunting target is sustainable: prey population above threshold 10 years into the future.")
} else {
  print("Hunting target is not sustainable: prey population below threshold.")
}
```

###### Take 4

-   `hunt_rate` = 0.2

```{r take 4, echo=TRUE, output=FALSE}
# set parameter list 
pars <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, 
           K = 2000, hunt_rate = 0.2, min_prey_thresh = 200)


# run our differential equation solver
res <- ode(func = hunt_lotvmodK, y = currpop, times = days, parms = pars, method = "ode45")
# extract the results
res_take4 <- as.data.frame(res) %>% 
  gather(key = "animal", value = "pop", -time)
```

```{r take 4 plot}
# graph both populations over time
p4 <- ggplot(res_take4, aes(time, pop, col = animal)) +
  geom_line() + 
  theme_classic()
p4


# check our metric value (prey pop above at least 50 individuals after 10 years)
# this is how we define stability
if (!3650 %in% res_take4$time) {
  print("Hunting target is not sustainable: model did not reach 10 years.")
} else if (res_take4$pop[res_take4$time == 3650 & res_take4$animal == "prey"] >= 50) {
  print("The hunting target is sustainable: prey population above threshold 10 years into the future.")
} else {
  print("Hunting target is not sustainable: prey population below threshold.")
}
```

### Deeper exploration

###### Take 5a

Range of hunt_rate values

-   `hunt_rate` from 0 to 0.9 by 0.05

```{r take 5a}

# investigating how prey pop at year 10 changes depending on hunt_rate value


# make a vector of input prey and hunt_rate values
hunt_rate_vals <- seq(0, 0.9, by = 0.1)

# fixed values for this run
times <- seq(0, 3650) # 10 years
init_pop <- c(prey = 500, pred = 50)  

# create an empty data frame for results
res_5 <- data.frame(hunt_rate = numeric(0), prey_at_10 = numeric(0))

# loop through hunt rates and obtain prey pop sizes at year 10
for (h in hunt_rate_vals) {
  # Define parameters, including the current hunt_rate
  pars <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4,
            hunt_rate = h, min_prey_thresh = 50, K = 2000)
  
  # Run simulation
  res <- ode(y = init_pop, times = times, func = hunt_lotvmodK, parms = pars, method = "ode45")
  res_take5 <- as.data.frame(res)

  # Get prey value at year 10 
  prey_10 <- res_take5$prey[res_take5$time == 3650]
  
  # Save result
  res_5 <- rbind(res_5, data.frame(hunt_rate = h, prey_at_10 = prey_10))
}


# plot the prey population at 10 years vs hunt_rate
p5 <- ggplot(res_5, aes(x = hunt_rate, y = prey_at_10)) +
  geom_point(color = "darkblue", size = 2) +
  labs(
    title = "Prey Population at Year 10 vs. Hunt Rate",
    x = "Hunt Rate",
    y = "Prey Population at Year 10"
  ) +
  theme_minimal()
p5

# based on the output graph of prey pop at year 10 (day 3650) vs hunt_rate, the highest prey pop value at year 10 is with a hunt_rate of 0.25. Thus, focusing only on our metric of choice for stability here (highest prey population possibly at year 10/day 3650), we recommend a hunt_rate of 0.25 to support maximum prey population size to support not just prey species existence but also that of predators and the recreational income/conservation benefits that come with allowing for hunting of this prey species.

```

Interpretation: In this assignment, we explored the effects of hunting on predator-prey dynamics using a modified Lotka-Volterra model. We defined stability as the ability of the prey and predator populations to remain above a threshold of **50 individuals** for **10 years** into the future. Through our exploration, we found that different hunting rates significantly affected the stability of both populations. We determined that a hunting rate of **0.25** (proportion of prey population that's hunted) was sustainable, allowing the prey population to remain as high as possible at the 10 year mark, and recommend that no more than 25% of prey populations are allowed to be hunted. Higher hunting rates (i.e., 0.6, 0.5, 0.4) led to unsustainable prey populations.

Note:

Our metric value, prey pop at year 10/day 3650, is appearing to be nearly the same across a broad range of hunt_rate values, which we attribute to the high rprey value provided as default (0.95). When we decrease this value (see below) to 0.5 and 0.05, we see greater differences in our metric value at year 10 across the same range of hunt_rate values. Intuitively, this makes sense, as rprey is the growth rate of prey population, thus if the prey population can rapidly regrow after significant hunting and/or predation, the prey population after 10 years could appear similar across different hunting limitations.

#### Take 5b: range of hunt_rate values and range of initial prey values

```{r take 5b}

# define ranges
hunt_rate_vals <- seq(0, 0.9, by = 0.1)
ini_prey_vals <- seq(100, 1000, by = 100)

# fixed settings
times <- seq(0, 3650, by = 1)  # 10 years
K <- 2000

# empty results data frame
results <- data.frame(
  hunt_rate = numeric(0),
  ini_prey = numeric(0),
  prey_at_10yr = numeric(0)
)

# loop through hunt_rate and ini_prey
for (h in hunt_rate_vals) {
  for (ip in ini_prey_vals) {
    
    init_pop <- c(prey = ip, pred = 50)
    
    pars <- c(rprey = 0.95, alpha = 0.3, eff = 0.2, pmort = 0.2,
              hunt_rate = h, min_prey_thresh = 50, K = K)
    
    # run model
    res <- ode(y = init_pop, times = times, func = hunt_lotvmodK, parms = pars, method = "ode45")
    res_df <- as.data.frame(res)
    
    # get prey pop at year 10
    prey_10yr <- res_df$prey[which.min(abs(res_df$time - 3650))]
    
    # save result
    results <- rbind(results, data.frame(
      hunt_rate = h,
      ini_prey = ip,
      prey_at_10yr = prey_10yr
    ))
  }
}

# plot scatter plot
ggplot(results, aes(x = ini_prey, y = prey_at_10yr, color = factor(hunt_rate))) +
  geom_point(size = 2) +
  labs(
    title = "Prey Population at Year 10",
    x = "Initial Prey Population",
    y = "Prey Population at Year 10",
    color = "Hunt Rate"
  ) +
  theme_minimal()

# facet
ggplot(results, aes(x = ini_prey, y = prey_at_10yr)) +
  geom_point(color = "darkblue", size = 2) +
  facet_wrap(~hunt_rate) +
  labs(
    title = "Effect of Initial Prey and Hunt Rate on Year-10 Prey",
    x = "Initial Prey",
    y = "Prey at Year 10"
  ) +
  theme_minimal()

```

#### Interpretation: 

Analyzing prey pop at year 10 over a range of hunt_rate and initial prey pop values yielded similar results. In this updated analysis, a hunt_rate of approximately 0.3 and a starting prey population of between 700 and 1000 yielded the highest prey populations at year 10. Once hunting rates meet and exceed 0.4, prey populations at year 10 exhibit significantly lower values consistently across ranges of initial prey values. Based on this more complex analysis, we would recommend a hunting limit of less than or equal to 30% of the initial prey population.

##### Take 6

```{r take 6}
# investigating how prey pop at year 10 changes depending on hunt_rate value
# rprey = 0.5


# make a vector of input prey values
hunt_rate_vals <- seq(0, 0.9, by = 0.1)

# fixed values for this run
times <- seq(0, 3650, by = 10) # 10 years
init_pop <- c(prey = 500, pred = 50)  

# create an empty data frame for results
res_5 <- data.frame(hunt_rate = numeric(0), prey_at_10 = numeric(0))

# loop through hunt rates and obtain prey pop sizes at year 10
# for (h in hunt_rate_vals) {
#   # Define parameters, including the current hunt_rate
#   pars <- c(rprey = 0.5, alpha = 0.01, eff = 0.6, pmort = 0.4,
#             hunt_rate = h, min_prey_thresh = 50, K = 2000)
#   
#   # Run simulation
#   res <- ode(y = init_pop, times = times, func = hunt_lotvmodK, parms = pars, method = "ode45")
#   res_take5 <- as.data.frame(res)
# 
#   # Get prey value at year 10 
#   prey_10 <- res_take5$prey[res_take5$time == 3650]
#   
#   # Save result
#   res_5 <- rbind(res_5, data.frame(hunt_rate = h, prey_at_10 = prey_10))
# }

# try lapply for quicker loading
# More efficient time sequence
times <- seq(0, 3650, by = 10)

# Use lsoda and lapply to speed up
res_list <- lapply(hunt_rate_vals, function(h) {
  pars <- c(rprey = 0.5, alpha = 0.01, eff = 0.6, pmort = 0.4,
            hunt_rate = h, min_prey_thresh = 50, K = 2000)
  res <- ode(y = init_pop, times = times, func = hunt_lotvmodK, parms = pars, method = "lsoda")
  res_df <- as.data.frame(res)
  prey_10 <- res_df$prey[which.min(abs(res_df$time - 3650))]
  data.frame(hunt_rate = h, prey_at_10 = prey_10)
})
res_5 <- do.call(rbind, res_list)



# plot the prey population at 10 years vs hunt_rate
p5 <- ggplot(res_5, aes(x = hunt_rate, y = prey_at_10)) +
  geom_point(color = "darkblue", size = 2) +
  labs(
    title = "Prey Population at Year 10 vs. Hunt Rate",
    x = "Hunt Rate",
    y = "Prey Population at Year 10"
  ) +
  theme_minimal()
p5
```

##### Take 7

```{r take 7}
# investigating how prey pop at year 10 changes depending on hunt_rate value
# rprey = 0.05


# make a vector of input prey values
hunt_rate_vals <- seq(0, 0.9, by = 0.1)

# fixed values for this run
times <- seq(0, 3650, by = 10) # 10 years
init_pop <- c(prey = 500, pred = 50)  

# create an empty data frame for results
res_5 <- data.frame(hunt_rate = numeric(0), prey_at_10 = numeric(0))

# loop through hunt rates and obtain prey pop sizes at year 10
# for (h in hunt_rate_vals) {
#   # Define parameters, including the current hunt_rate
#   pars <- c(rprey = 0.05, alpha = 0.01, eff = 0.6, pmort = 0.4,
#             hunt_rate = h, min_prey_thresh = 50, K = 2000)
#   
#   # Run simulation
#   res <- ode(y = init_pop, times = times, func = hunt_lotvmodK, parms = pars, method = "lsoda")
#   res_take5 <- as.data.frame(res)
# 
#   # Get prey value at year 10 
#   prey_10 <- res_take5$prey[res_take5$time == 3650]
#   
#   # Save result
#   res_5 <- rbind(res_5, data.frame(hunt_rate = h, prey_at_10 = prey_10))
# }

# try lapply for quicker loading
# More efficient time sequence
times <- seq(0, 3650, by = 10)

# Use lsoda and lapply to speed up
res_list <- lapply(hunt_rate_vals, function(h) {
  pars <- c(rprey = 0.05, alpha = 0.01, eff = 0.6, pmort = 0.4,
            hunt_rate = h, min_prey_thresh = 50, K = 2000)
  res <- ode(y = init_pop, times = times, func = hunt_lotvmodK, parms = pars, method = "lsoda")
  res_df <- as.data.frame(res)
  prey_10 <- res_df$prey[which.min(abs(res_df$time - 3650))]
  data.frame(hunt_rate = h, prey_at_10 = prey_10)
})
res_5 <- do.call(rbind, res_list)


# plot the prey population at 10 years vs hunt_rate
p5 <- ggplot(res_5, aes(x = hunt_rate, y = prey_at_10)) +
  geom_point(color = "darkblue", size = 2) +
  labs(
    title = "Prey Population at Year 10 vs. Hunt Rate",
    x = "Hunt Rate",
    y = "Prey Population at Year 10"
  ) +
  theme_minimal()
p5
```
